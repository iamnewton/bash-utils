#!/usr/bin/env bash
#
# Author:
#   Miscellaneous
#
# Description:
#   Various helper functions
#
# Dependencies:
#   None
#
# Configuration:
#   See each function for configuration & usage

# Header logging
_header() {
	printf "\n%s%s:%s\n" "$(tput setaf 7)" "$@" "$(tput sgr0)"
}

# Success logging
_success() {
	printf "%s✓ Success:%s %s\n" "$(tput setaf 2)" "$(tput sgr0)" "$@"
}

# Info logging
_info() {
	printf "%sⓘ  Info:%s %s\n" "$(tput setaf 4)" "$(tput sgr0)" "$@"
}

# Error logging
_error() {
	printf "%s⊘ Error:%s %s. Aborting\n" "$(tput setaf 1)" "$(tput sgr0)" "$@"
	exit 1
}

# Warning logging
_warning() {
	printf "%s⚠ Warning:%s %s\n" "$(tput bold ; tput setaf 3)" "$(tput sgr0)" "$@"
}

# Question logging
_question() {
	printf "\n%s==> %s?%s\n" "$(tput setaf 3)" "$@" "$(tput sgr0)"
}

# Command/Processing logging
_process() {
	printf "%s┃ Processing:%s %s\n" "$(tput setaf 6)" "$(tput sgr0)" "$@"
}

# Ask for confirmation before proceeding
seek_confirmation() {
	printf "\n%s==> %s?%s\n" "$(tput setaf 3)" "$@" "$(tput sgr0)"
	read -p "Continue? (y/n) " -n 1
	printf "\n"
}

# Test whether the result of an 'ask' is a confirmation
is_confirmed() {
	if [[ "$REPLY" =~ ^[Yy]$ ]]; then
		return 0
	fi
	return 1
}

# Create a new directory and enter it
md() {
  mkdir -p "$@" && cd "$@"
}

# All the dig info
digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo # newline
	fi
}

# Decode \x{ABCD}-style Unicode escape sequences
unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo # newline
	fi
}

# Get a character’s Unicode code point
codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo # newline
	fi
}

# Install Grunt plugins and add them as `devDependencies` to `package.json`
# Usage: `gi contrib-watch contrib-uglify zopfli`
gi() {
	local IFS=,
	eval npm install --save-dev grunt-{"$*"}
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
v() {
	if [ $# -eq 0 ]; then
		vim .
	else
		vim "$@"
	fi
}

# `o` with no arguments opens current directory, otherwise opens the given
# location
o() {
	if [ $# -eq 0 ]; then
		open .
	else
		open "$@"
	fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

capitalize() {
	echo "$(tr '[:lower:]' '[:upper:]' <<< ${1:0:1})${1:1}"
}

# `np` with an optional argument `patch`/`minor`/`major`/`<version>`
# defaults to `patch`
np() {
	git pull --rebase
	rm -rf node_modules
	npm install
	npm test && npm version ${1:=patch}
	npm publish
	git push origin main
	git push origin main --tags
}

# Test whether we're in a git repo
is-git-repo() {
	$(git rev-parse --is-inside-work-tree &> /dev/null)
}

print-version() {
	local line=$1
	shift
	local word=$1
	shift

	# set local variable to excecuted arguments that is passed in
	echo "$( $@ | head -$line | tail -1 | cut -d ' ' -f $word )"
}

# Convert file with line items into single string
file-to-string() {
	# set a local array variable
	local -a tmp_string
	local index tmp
	# store IFS within a temp variable
	OIFS=$IFS
	# set the separator to a carriage return & a new line break
	# read in passed-in file and store as an array
	IFS=$'\r\n' files=($(cat $1))
	# loop through array
	for index in ${files[*]}
	do
		# create a string of all files with a comma at the end
		tmp=$( printf "%s, " "${files[@]}" )
	done
	# reset IFS back
	IFS=$OIFS
	# print out result with last character removed
	echo "${tmp%%??}\n"
}
change_version() {
	local old=$1
	local new=$2
	local file=$3
	local regex="s/$old/$new/g"
	perl -pi -e $regex $file
}
