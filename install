#!/usr/bin/env bash

REPO="bash-utils"
DIR="/usr/local/opt/${REPO}"
GITHUB_USER="iamnewton"

# If missing, download and extract the repository
if [[ ! -d "${DIR}" ]]; then

	# no bash directory found
	printf "%s⚠ Warning:%s No %s found!\n" "$(tput bold ; tput setaf 3)" "$(tput sgr0)" "${DIR}"

	# create directory
	printf "%s┃%s Creating directory at %s...%s\n" "$(tput setaf 6)" "$(tput sgr0 ; tput setaf 7)" "${DIR}" "$(tput sgr0)"
	mkdir -p "${DIR}"

	# Download the repository as a tarball
	printf "%s┃%s Downloading repository to /tmp directory...%s\n" "$(tput setaf 6)" "$(tput sgr0 ; tput setaf 7)" "$(tput sgr0)"
	curl -#fLo /tmp/${REPO}.tar.gz "https://github.com/${GITHUB_USER}/${REPO}/tarball/main"

	# Extract to the ${REPO} directory
	printf "%s┃%s Extracting files to %s...%s\n" "$(tput setaf 6)" "$(tput sgr0 ; tput setaf 7)" "${DIR}" "$(tput sgr0)"
	tar -zxf /tmp/${REPO}.tar.gz --strip-components 1 -C "${DIR}"

	# Remove the tarball
	printf "%s┃%s Removing tarball from /tmp directory...%s\n" "$(tput setaf 6)" "$(tput sgr0 ; tput setaf 7)" "$(tput sgr0)"
	rm -rf /tmp/${REPO}.tar.gz

	printf "%s✓ Success:%s %s created, repository downloaded and extracted.\n" "$(tput setaf 2)" "$(tput sgr0)" "${DIR}"
fi

# Change to the ${REPO} directory
cd "${DIR}"

# Initialize the git repository if it's missing
printf "%s┃%s Initializing git repository...%s\n" "$(tput setaf 6)" "$(tput sgr0 ; tput setaf 7)" "$(tput sgr0)"
git init
git branch -M main

printf "%s┃%s Adding https://github.com/%s/%s.git as origin...%s\n" "$(tput setaf 6)" "$(tput sgr0 ; tput setaf 7)" "${GITHUB_USER}" "${REPO}" "$(tput sgr0)"
git remote add origin "https://github.com/${GITHUB_USER}/${REPO}.git"

printf "%s┃%s Downloading changes from origin...%s\n" "$(tput setaf 6)" "$(tput sgr0 ; tput setaf 7)" "$(tput sgr0)"
git fetch origin main

# Reset the index and working tree to the fetched HEAD
# (submodules are cloned in the subsequent sync step)
printf "%s┃%s Resetting index & working tree to fetched HEAD...%s\n" "$(tput setaf 6)" "$(tput sgr0 ; tput setaf 7)" "$(tput sgr0)"
git reset --hard FETCH_HEAD

# Remove any untracked files
printf "%s┃%s Removing any untracked files...%s\n" "$(tput setaf 6)" "$(tput sgr0 ; tput setaf 7)" "$(tput sgr0)"
git clean -fd

[[ $? ]] && printf "%s✓ Success:%s Repository has been initialized.%s\n" "$(tput setaf 2)" "$(tput sgr0 ; tput setaf 7)" "$(tput sgr0)"

# Pull down the latest changes
printf "%s┃%s Pulling down latest changes...%s\n" "$(tput setaf 6)" "$(tput sgr0 ; tput setaf 7)" "$(tput sgr0)"
git pull --rebase origin main

# Update submodules
printf "%s┃%s Updating submodules...%s\n" "$(tput setaf 6)" "$(tput sgr0 ; tput setaf 7)" "$(tput sgr0)"
git submodule update --recursive --init --quiet

[[ $? ]] && printf "%s✓ Success:%s Repository has been updated.%s\n" "$(tput setaf 2)" "$(tput sgr0 ; tput setaf 7)" "$(tput sgr0)"

printf "%s┃%s Symlinking %s/bin/* to /usr/local/bin/...%s\n" "$(tput setaf 6)" "$(tput sgr0 ; tput setaf 7)" "${DIR}" "$(tput sgr0)"
for file in $(find "${DIR}/bin" -type f -execdir echo {} +);
do
	ln -fs "${DIR}/bin/${file}" "/usr/local/bin/${file}"
done

[[ $? ]] && printf "%s✓ Success:%s %s has been installed.%s\n" "$(tput setaf 2)" "$(tput sgr0 ; tput setaf 7)" "${DIR}" "$(tput sgr0)"
